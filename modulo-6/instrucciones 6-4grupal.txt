<FORMULARIO>

1. models.py

    a. Crear modelos. 
        -Cada clase debe heredar de (models.Model).
        -Se define cada campo como una variable, asignada a un 'model data type' que indica el tipo de dato que se almacenará en la db.
        
        ej:
        class Persona(models.Model):
            rut = models.CharField(max_lenght=11)
            nombre = models.CharField(max_length=40)
            apellidos = models.CharField(max_length=70)
            ... etc

        - se puede definir un __str__ para que en el campo del objeto se vea su nombre:
            def __str__(self):
                return f"{self.nombre} {self.apellidos}"
    b. Hacer las migraciones, para que los modelos se agreguen a la base de datos:
        
        $ python3 manage.py makemigrations
        $ python3 maage.py migrate


2. views.py
    a. Importar los modelos recién creados, para poder acceder a ellos:

        from .models import Funcionario, Paciente
    
    b. Crear una clase para el formulario. Esta clase se puede agregar en un forms.py y luego importarlo a views. En este caso lo hice
        directamente en views.py.

        class AgregaFuncionarioForm(forms.Form):
            rut = forms.CharField(label="RUT")
            nombre = forms.CharField(label = "Nombre")
            apellidos = forms.CharField(label="Apellidos")
            ... etc

    b. Crear un view que tenga acceso al formulario recién creado.
        def agregar_usuario(request):
            return render(request, 
                  "user_manager/agregar.html", 
                  {'formulario': AgregaFuncionarioForm(request.POST), #request.POST solicita envío})
                   


    c. Importar el módulo de formularios de django:

        from django import forms


    e. Agregar la variable del formulario recién creado al view, para que se pueda tener acceso desde el html.

        def agregar_usuario(request):
            return render(request, "user_manager/agregar.html", {'formulario': AgregaFuncionarioForm, 'funcionarios': Funcionario.objects.all(), 'pacientes': Paciente.objects.all()})

3. Hacer un template donde se creará la funcionalidad, en este caso se llamará agregar.html. Ademá de el 'extend' y el 'block', llevará
   lo siguiente:

        <h1>Agregar funcionario<h1>
    <form action="", method="POST">
        {% csrf_token %}
        <table>
            {{ formulario}}
        </table>
        <button type="submit">Enviar</button>
    </form>
    
    *   action="" determina con qué URL se trabajará(la ctual en este caso), y 'POST' es el método que se ejecutará al hacer submit,
        que en este caso empaquetará el formulario, lo codificará y lo enviará al servidor.
    **  'csrf_token' genera automáticamente un token único para identificar la sesión.
    *** {{formulario}} llama al formulario creado dentro de views.py, por el nombre que se le asignó a la variable en los atributos del
        respectivo render.

4. Modificamos el view del formulario en views.py para agregar lógica de verificación de los datos del formulario antes de ser enviado.


    def agregar_usuario(request):

        return render(request, 
                      "user_manager/agregar.html", 
                      {'formulario': AgregaFuncionarioForm(request.POST), #solicita envío
                       'funcionarios': Funcionario.objects.all(), #para leer datos de funcionarios
                       'pacientes': Paciente.objects.all() #para leer datos de pacientes
                       }) 